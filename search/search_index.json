{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Helpfully: Overview \u00b6 Helpfully is a set of simple Lua modules that allow Roblox developers to do simple things. Starting from humble origins, Helpfully focuses on simple implementations for solutions to common problems. Helpfully consists of the following modules: Module Description debug Functions to aid debugging functions Functions for creating functions Logger A class for logging information, warnings, and errors paths Functions for parsing path strings and finding Instances by path tables Functions for manipulating tables Learn More \u00b6 Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"Overview"},{"location":"#helpfully-overview","text":"Helpfully is a set of simple Lua modules that allow Roblox developers to do simple things. Starting from humble origins, Helpfully focuses on simple implementations for solutions to common problems. Helpfully consists of the following modules: Module Description debug Functions to aid debugging functions Functions for creating functions Logger A class for logging information, warnings, and errors paths Functions for parsing path strings and finding Instances by path tables Functions for manipulating tables","title":"Helpfully: Overview"},{"location":"#learn-more","text":"Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"Learn More"},{"location":"changelog/","text":"Helpfully: Changelog \u00b6 1.0.1 (2021-06-06) \u00b6 Added \u00b6 Helpfully is now a ModuleScript that returns all child modules New version of default.project.json which outputs a Folder instead of DataModel Selene configuration file for linting Basic VSCode Workspace Changed \u00b6 Renamed default.project.json to place.project.json Renamed Helpfully.rbxlx to Helpfully-place.rbxlx Renamed test.project.json to tests.project.json Renamed test.rbxlx to Helpfully-tests.rbxlx Updated documentation 1.0.0 (2021-05-25) \u00b6 Initial release. Added \u00b6 Everything. Hello, world! The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Copyright (c) 2021 BetterThanReal","title":"Changelog"},{"location":"changelog/#helpfully-changelog","text":"","title":"Helpfully: Changelog"},{"location":"changelog/#101-2021-06-06","text":"","title":"1.0.1 (2021-06-06)"},{"location":"changelog/#100-2021-05-25","text":"Initial release.","title":"1.0.0 (2021-05-25)"},{"location":"installation/","text":"Helpfully: Installation \u00b6 Choosing Where To Install Helpfully \u00b6 Within a Roblox Studio project, Helpfully can be installed to a single, shared location where it can be accessed by all project modules that will use it. Conversely, it can also be installed as a child within each module that will use it. Installing Helpfully to a shared location can ensure that a single, known version of Helpfully is used across all modules, while also reducing the file size of the Roblox project. Installing Helpfully as a child within each module that uses Helpfully may help simplify the sharing of such modules with other projects, which can be useful for module libraries. Choosing How To Install Helpfully \u00b6 Helpfully can be installed by loading a Helpfully model file into Roblox Studio, or by using a developer tool to synchronize Helpfully's source code into a Roblox Studio project. Loading A Helpfully Model File Into Roblox Studio \u00b6 Obtain the latest version of Helpfully.rbxmx from the GitHub Release Page Insert the model into the chosen parent object(s) within a Roblox Studio project Using A Developer Tool To Synchronize Helpfully \u00b6 Developers who use tools such as Rojo or Remodel can copy the Helpfully source code to the appropriate location(s): Download or clone the source code for Helpfully into a local directory Copy or synchronize the src/Helpfully folder into a Roblox Studio project at the appropriate location(s). Ensure that the new Instance containing Helpfully is named Helpfully . Learn More \u00b6 Read the API Reference to learn about Helpfully modules.","title":"Installation"},{"location":"installation/#helpfully-installation","text":"","title":"Helpfully: Installation"},{"location":"installation/#choosing-where-to-install-helpfully","text":"Within a Roblox Studio project, Helpfully can be installed to a single, shared location where it can be accessed by all project modules that will use it. Conversely, it can also be installed as a child within each module that will use it. Installing Helpfully to a shared location can ensure that a single, known version of Helpfully is used across all modules, while also reducing the file size of the Roblox project. Installing Helpfully as a child within each module that uses Helpfully may help simplify the sharing of such modules with other projects, which can be useful for module libraries.","title":"Choosing Where To Install Helpfully"},{"location":"installation/#choosing-how-to-install-helpfully","text":"Helpfully can be installed by loading a Helpfully model file into Roblox Studio, or by using a developer tool to synchronize Helpfully's source code into a Roblox Studio project.","title":"Choosing How To Install Helpfully"},{"location":"installation/#loading-a-helpfully-model-file-into-roblox-studio","text":"Obtain the latest version of Helpfully.rbxmx from the GitHub Release Page Insert the model into the chosen parent object(s) within a Roblox Studio project","title":"Loading A Helpfully Model File Into Roblox Studio"},{"location":"installation/#using-a-developer-tool-to-synchronize-helpfully","text":"Developers who use tools such as Rojo or Remodel can copy the Helpfully source code to the appropriate location(s): Download or clone the source code for Helpfully into a local directory Copy or synchronize the src/Helpfully folder into a Roblox Studio project at the appropriate location(s). Ensure that the new Instance containing Helpfully is named Helpfully .","title":"Using A Developer Tool To Synchronize Helpfully"},{"location":"installation/#learn-more","text":"Read the API Reference to learn about Helpfully modules.","title":"Learn More"},{"location":"license/","text":"MIT License Copyright (c) 2021 BetterThanReal Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"api-reference/","text":"Helpfully: API Reference \u00b6 Helpfully consists of the following modules: Module Description debug Functions to aid debugging functions Functions for creating functions Logger A class for logging information, warnings, and errors paths Functions for parsing path strings and finding Instances by path tables Functions for manipulating tables Loading The Module \u00b6 Invoking require upon the Helpfully module will return a table with all of the modules as properties: -- Requiring the modules all at once: local Helpfully = require ( script . Parent . Helpfully ) local debug = Helpfully . debug local functions = Helpfully . functions local Logger = Helpfully . Logger local paths = Helpfully . paths local tables = Helpfully . tables Modules can also be required individually: -- Requiring the modules manually, on-demand: local Helpfully = script . Parent . Helpfully local debug = require ( Helpfully . debug ) local functions = require ( Helpfully . functions ) local Logger = require ( Helpfully . Logger ) local paths = require ( Helpfully . paths ) local tables = require ( Helpfully . tables ) Learn More \u00b6 Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"Overview"},{"location":"api-reference/#helpfully-api-reference","text":"Helpfully consists of the following modules: Module Description debug Functions to aid debugging functions Functions for creating functions Logger A class for logging information, warnings, and errors paths Functions for parsing path strings and finding Instances by path tables Functions for manipulating tables","title":"Helpfully: API Reference"},{"location":"api-reference/#loading-the-module","text":"Invoking require upon the Helpfully module will return a table with all of the modules as properties: -- Requiring the modules all at once: local Helpfully = require ( script . Parent . Helpfully ) local debug = Helpfully . debug local functions = Helpfully . functions local Logger = Helpfully . Logger local paths = Helpfully . paths local tables = Helpfully . tables Modules can also be required individually: -- Requiring the modules manually, on-demand: local Helpfully = script . Parent . Helpfully local debug = require ( Helpfully . debug ) local functions = require ( Helpfully . functions ) local Logger = require ( Helpfully . Logger ) local paths = require ( Helpfully . paths ) local tables = require ( Helpfully . tables )","title":"Loading The Module"},{"location":"api-reference/#learn-more","text":"Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"Learn More"},{"location":"api-reference/Logger/","text":"Helpfully: API Reference: Logger \u00b6 Logger is a class for logging information, warnings, and errors. Loading The Module \u00b6 Invoking require upon the module Helpfully.Logger will return a Logger configured with default behavior. Logger() can be invoked to create a Logger with customized behavior. Example: require local Helpfully = script . Parent . Helpfully local Logger = require ( Helpfully . Logger ) Logger . info ( \"Hello\" ) -- print(\"[INFO] Hello\") local logger = Logger ({ name = \"MyLib\" }) logger . info ( \"Hello\" ) -- print(\"[INFO] {MyLib}: Hello\") Class Methods \u00b6 Function Name Description Logger() Creates and returns a custom Logger with user-defined behavior. Instance Methods \u00b6 Function Name Description critical Logs messages for events with critical severity. debug Logs messages for events with debug severity. error Logs messages for events with error severity. fatal Logs messages for events with fatal severity. info Logs messages for events with info severity. verbose Logs messages for events with verbose severity. warn Logs messages for events with warn severity. Constants \u00b6 Enumeration: LOG_LEVEL \u00b6 Name Value Severity NONE 100 Nothing will be logged. FATAL 95 The highest severity; the application encountered an error from which it cannot recover. CRITICAL 85 High severity; the application encountered an error that prevents it from working properly. ERROR 75 Medium-high severity; an error occurred, but the application may recover. WARN 65 Medium-low severity; an event happened that does not impact full application functionality, but merits attention. INFO 50 Low severity; information presented for informational purposes only. VERBOSE 35 Very low severity; provides additional information that may be useful for detailed analyses. DEBUG 20 Very low severity; provides copious amounts of additional information that may be useful for troubleshooting, but is too voluminous to utilize regularly. ALL 0 Everything will be logged. Function: Logger() \u00b6 Creates and returns a custom Logger with user-defined behavior. Signature \u00b6 Logger Logger ([ table config ]) Parameters \u00b6 Name Type Synopsis config table (optional) An optional table containing configuration properties to define the behavior of the Logger to be created and returned. If not specified, a Logger with default behavior will be returned. config Properties \u00b6 Name Type Synopsis level number or string (optional) An optional minimum severity of events to log. Logging functions with a lower severity level than this will be ignored when invoked. Defaults to LOG_LEVEL.ALL . name string (optional) An optional name to report to logging functions. onLogFn function (optional) An optional custom log handler to invoke when logging functions are invoked. If not specified, defaults to the default log handlers . Returns \u00b6 Type(s) Synopsis Logger The Logger configured according to the specified config . Side-Effects \u00b6 None. Errors \u00b6 Logger() will throw an error if config is present but is not a table . Logger() will throw an error if config.name is present but is not a string . Logger() will throw an error if config.level is present but is not a number , or is a string but does not equal the name of a log level . Logger() will throw an error if config.onLogFn is present but is not a function . Caveats \u00b6 None. Examples \u00b6 Example: Logger() local Helpfully = script . Parent . Helpfully local Logger = require ( Helpfully . Logger ) local logger = Logger ({ level = Logger . LOG_LEVEL . INFO , -- Log events of severity INFO or greater. name = \"MyLib\" }) Logger . info ( \"Hello\" ) -- print(\"[INFO] {MyLib}: Hello\") Logger . verbose ( \"Hello\" ) -- Ignored, is not INFO or greater local errorCount = 0 local function errorCounter ( logLevel , name , message ) errorCount = errorCount + 1 print (( \"ERROR in %s: %s\" ): format ( name , message )) if ( logLevel >= Logger . LOG_LEVEL . CRITICAL ) then error ( \"Severe error occurred; unable to continue\" ) end end logger = Logger ({ level = Logger . LOG_LEVEL . ERROR , -- Log events of severity ERROR or greater. name = \"MyLib\" , onLogFn = errorCounter }) logger . error ( \"First error\" ) -- print(\"ERROR in MyLib: First error\") logger . error ( \"Second error\" ) -- print(\"ERROR in MyLib: Second error\") print ( errorCount ) -- 2 Logging \u00b6 Executes the user-specified log handler , or an appropriate default log handler if one has not been configured . Each of the logging functions ( critical , debug , error , fatal , info , verbose , and warn ) has the same function signature and behavior, and varies only in the severity level it reports, and the default log handler it uses if one has not been configured. Logging Functions \u00b6 Logging Function Defaults \u00b6 Function Name Reported Severity Default Log Handler * critical LOG_LEVEL.CRITICAL error debug LOG_LEVEL.DEBUG print error LOG_LEVEL.ERROR error fatal LOG_LEVEL.FATAL error info LOG_LEVEL.INFO print verbose LOG_LEVEL.VERBOSE print warn LOG_LEVEL.WARN warn * Actually, the default log handlers are wrappers around the functions listed here, to maintain compatibility with function signatures. Signature \u00b6 [ Variant ...] critical ([ Variant ... args ]) [ Variant ...] debug ([ Variant ... args ]) [ Variant ...] error ([ Variant ... args ]) [ Variant ...] fatal ([ Variant ... args ]) [ Variant ...] info ([ Variant ... args ]) [ Variant ...] verbose ([ Variant ... args ]) [ Variant ...] warn ([ Variant ... args ]) Parameters \u00b6 Name Type Synopsis args Variant... (optional) Zero or more arguments to pass to the log handler . Returns \u00b6 Type(s) Synopsis Variant... (optional) Zero or more return values, returned from the log handler . Side-Effects \u00b6 When invoked, each logging function will in turn invoke a log handler , if the log level corresponding to the logging function is equal to or greater than the threshold log level specified when configuring the logger . Thus, if a logger is configured with the threshold log level ERROR , logging functions with lower severity ( warn , info , verbose , and debug ) will be ignored. The log handler that any logging function invokes will have been specified when configuring the logger. If no custom log handler was specified, the default log handler corresponding to the log level of the logging function will be used. Log handlers are invoked with the function signature for log handlers . Errors \u00b6 Errors that occur within a custom log handler are thrown. To prevent custom log handlers from throwing errors, wrap their internal logic with pcall or xpcall . Caveats \u00b6 None. Examples \u00b6 Example: Logging Function local Helpfully = script . Parent . Helpfully local Logger = require ( Helpfully . Logger ) Logger . info ( \"Hello\" ) -- print(\"[INFO] Hello\") Logger . error ( \"Ooops\" ) -- error(\"[ERROR] Ooops\") Log Handler \u00b6 An optional, custom log handler can be specified when configuring the logger , to process custom logging logic whenever a logging function is invoked. Signature \u00b6 [ Variant ...] function ( number logLevel , string name , [ Variant ... args ]) Parameters \u00b6 Name Type Synopsis logLevel number The log level that corresponds to the severity of the logging function that invoked this log handler. name string The name parameter specified during configuration of the logger , or nil if none was specified. args Variant... (optional) Zero or more arguments that were passed to the logging function that invoked this log handler. Returns \u00b6 Type(s) Synopsis Variant... (optional) Zero or more return values. Side Effects \u00b6 All side effects from custom log handlers are programmed by the developers of the log handlers. The default log handlers print , warn , and error each have side effects defined by those built-in functions. Errors \u00b6 All errors thrown from custom log handlers are programmed by the developers of the log handlers. The default log handler for logging functions of severity critical , error , and fatal is the built-in Lua function error , which naturally causes an error to be thrown. Caveats \u00b6 None. Examples \u00b6 Example: Log Handler local Helpfully = script . Parent . Helpfully local Logger = require ( Helpfully . Logger ) local errorCount = 0 local function errorCounter ( logLevel , name , message ) errorCount = errorCount + 1 print (( \"ERROR in %s: %s\" ): format ( name , message )) if ( logLevel >= Logger . LOG_LEVEL . CRITICAL ) then error ( \"Severe error occurred; unable to continue\" ) end end logger = Logger ({ level = Logger . LOG_LEVEL . ERROR , -- Log events of severity ERROR or greater. name = \"MyLib\" , onLogFn = errorCounter }) logger . error ( \"First error\" ) -- print(\"ERROR in MyLib: First error\") logger . error ( \"Second error\" ) -- print(\"ERROR in MyLib: Second error\") print ( errorCount ) -- 2 Learn More \u00b6 Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"Logger"},{"location":"api-reference/Logger/#helpfully-api-reference-logger","text":"Logger is a class for logging information, warnings, and errors.","title":"Helpfully: API Reference: Logger"},{"location":"api-reference/Logger/#loading-the-module","text":"Invoking require upon the module Helpfully.Logger will return a Logger configured with default behavior. Logger() can be invoked to create a Logger with customized behavior. Example: require local Helpfully = script . Parent . Helpfully local Logger = require ( Helpfully . Logger ) Logger . info ( \"Hello\" ) -- print(\"[INFO] Hello\") local logger = Logger ({ name = \"MyLib\" }) logger . info ( \"Hello\" ) -- print(\"[INFO] {MyLib}: Hello\")","title":"Loading The Module"},{"location":"api-reference/Logger/#class-methods","text":"Function Name Description Logger() Creates and returns a custom Logger with user-defined behavior.","title":"Class Methods"},{"location":"api-reference/Logger/#instance-methods","text":"Function Name Description critical Logs messages for events with critical severity. debug Logs messages for events with debug severity. error Logs messages for events with error severity. fatal Logs messages for events with fatal severity. info Logs messages for events with info severity. verbose Logs messages for events with verbose severity. warn Logs messages for events with warn severity.","title":"Instance Methods"},{"location":"api-reference/Logger/#constants","text":"","title":"Constants"},{"location":"api-reference/Logger/#enumeration-log_level","text":"Name Value Severity NONE 100 Nothing will be logged. FATAL 95 The highest severity; the application encountered an error from which it cannot recover. CRITICAL 85 High severity; the application encountered an error that prevents it from working properly. ERROR 75 Medium-high severity; an error occurred, but the application may recover. WARN 65 Medium-low severity; an event happened that does not impact full application functionality, but merits attention. INFO 50 Low severity; information presented for informational purposes only. VERBOSE 35 Very low severity; provides additional information that may be useful for detailed analyses. DEBUG 20 Very low severity; provides copious amounts of additional information that may be useful for troubleshooting, but is too voluminous to utilize regularly. ALL 0 Everything will be logged.","title":"Enumeration: LOG_LEVEL"},{"location":"api-reference/Logger/#function-logger","text":"Creates and returns a custom Logger with user-defined behavior.","title":"Function: Logger()"},{"location":"api-reference/Logger/#logging","text":"Executes the user-specified log handler , or an appropriate default log handler if one has not been configured . Each of the logging functions ( critical , debug , error , fatal , info , verbose , and warn ) has the same function signature and behavior, and varies only in the severity level it reports, and the default log handler it uses if one has not been configured.","title":"Logging"},{"location":"api-reference/Logger/#logging-functions","text":"","title":"Logging Functions"},{"location":"api-reference/Logger/#log-handler","text":"An optional, custom log handler can be specified when configuring the logger , to process custom logging logic whenever a logging function is invoked.","title":"Log Handler"},{"location":"api-reference/Logger/#learn-more","text":"Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"Learn More"},{"location":"api-reference/debug/","text":"Helpfully: API Reference: Debug \u00b6 debug contains functions to aid debugging. Function Name Description getRefLabel Returns a human-readable string label describing the type of data specified. Useful for reporting mismatched function parameters. trimErrMsgLineNum Returns a version of the specified error message string, but without a prefix containing the error source and line number. Useful for re-throwing error messages from wrapper functions. Function: getRefLabel \u00b6 Returns a human-readable string label describing the type of data specified. Useful for reporting mismatched function parameters. Signature \u00b6 string getRefLabel ( string ref ) Parameters \u00b6 Name Type Synopsis ref string (optional) The data for which a human-readable string label should be returned. Returns \u00b6 Type(s) Synopsis string The human-readable string label for ref . Side Effects \u00b6 None. Errors \u00b6 None. Caveats \u00b6 getRefLabel does not escape special characters within string literal values of ref . Examples \u00b6 Example: getRefLabel local Helpfully = script . Parent . Helpfully local debug = require ( Helpfully . debug ) local getRefLabel = debug . getRefLabel print ( getRefLabel ( nil )) -- nil print ( getRefLabel ( false )) -- false print ( getRefLabel ( function () end )) -- <function> print ( getRefLabel ( 5 )) -- 5 print ( getRefLabel ( Instance . new ( \"Part\" ))) -- <Part> \"Part\" print ( getRefLabel ( game . ReplicatedStorage . Scripts )) -- <Folder> \"Scripts\" print ( getRefLabel ( \"hello\" )) -- \"hello\" print ( getRefLabel ({})) -- <table> -- Caveat: getRefLabel does not escape special characters within strings: print ( getRefLabel ( '\" \\\\ hello\"' )) -- \"\"\\hello\"\" Function: trimErrMsgLineNum \u00b6 Returns a version of the specified error message string, but without a prefix containing the error source and line number. Useful for re-throwing error messages from wrapper functions. Signature \u00b6 string trimErrMsgLineNum ([ string message ]) Parameters \u00b6 Name Type Synopsis message string (optional) The error message for which the prefix containing the error source and line number should be removed. If a non- string value, it will be returned without modification. Returns \u00b6 Type(s) Synopsis string A version of message without a prefix containing the error source and line number. Side Effects \u00b6 None. Errors \u00b6 None. Caveats \u00b6 trimErrMsgLineNum performs a simple string substitution to remove the error message prefix containing an error source and line number. If the error source happens to contain a number surrounded on each side by colons, trimErrMsgLineNum will return a string with the wrong results, as it will be impossible to unambiguously determine where the error source string terminates. Examples \u00b6 Example: trimErrMsgLineNum local Helpfully = script . Parent . Helpfully local debug = require ( Helpfully . debug ) local trimErrMsgLineNum = debug . trimErrMsgLineNum print ( trimErrMsgLineNum ( \"ServerScriptService.MyLib:100: An error occurred!\" )) -- An error occurred! print ( trimErrMsgLineNum ()) -- nil print ( trimErrMsgLineNum ( false )) -- false print ( trimErrMsgLineNum ( 5 )) -- 5 Learn More \u00b6 Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"debug"},{"location":"api-reference/debug/#helpfully-api-reference-debug","text":"debug contains functions to aid debugging. Function Name Description getRefLabel Returns a human-readable string label describing the type of data specified. Useful for reporting mismatched function parameters. trimErrMsgLineNum Returns a version of the specified error message string, but without a prefix containing the error source and line number. Useful for re-throwing error messages from wrapper functions.","title":"Helpfully: API Reference: Debug"},{"location":"api-reference/debug/#function-getreflabel","text":"Returns a human-readable string label describing the type of data specified. Useful for reporting mismatched function parameters.","title":"Function: getRefLabel"},{"location":"api-reference/debug/#function-trimerrmsglinenum","text":"Returns a version of the specified error message string, but without a prefix containing the error source and line number. Useful for re-throwing error messages from wrapper functions.","title":"Function: trimErrMsgLineNum"},{"location":"api-reference/debug/#learn-more","text":"Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"Learn More"},{"location":"api-reference/functions/","text":"Helpfully: API Reference: Functions \u00b6 functions contains functions for creating functions. Function Name Description bind Returns a new bound function that invokes the specified function with the specified arguments. bindDrop Returns a new bound function that invokes the specified function with the specified arguments, but removes the specified number of return values from the bound function. bindKeep Returns a new bound function that invokes the specified function with the specified arguments, keeping only the specified number of return values from the bound function. noOp A function that literally does nothing. Function: bind \u00b6 Returns a new bound function that invokes the specified function with the specified arguments. Signature \u00b6 function bind ( function fn , [ Variant ... args ]) Parameters \u00b6 Name Type Synopsis fn function A new bound function that invokes fn with args . args Variant... (optional) Zero or more arguments to pass to fn when invoking it. Returns \u00b6 Type(s) Synopsis function The function bound to fn . Side Effects \u00b6 None. Errors \u00b6 bind will throw an error if fn is missing or is not a function . Caveats \u00b6 Calling bind with five or more arguments will incur a slight performance penalty during each invocation of the bound function, since the bound function must pack , move , and unpack the values within args into the arguments separately passed to the bound function, every time the bound function is invoked. Note that the common scenario of calling bind with less than five arguments has been optimized, and does not incur this performance penalty. Examples \u00b6 Example: bind local Helpfully = script . Parent . Helpfully local functions = require ( Helpfully . functions ) local bind = functions . bind local function multiply ( num1 , num2 ) return num1 * num2 end local double = bind ( multiply , 2 ) print ( double ( 5 )) -- 10 local function valstr (...) return table.concat ({ ... }, \":\" ) end local bound = bind ( valstr , \"hello\" , \"there\" ) print ( bound ( \"user\" )) -- \"hello:there:user\" Function: bindDrop \u00b6 Returns a new bound function that invokes the specified function with the specified arguments, but removes the specified number of return values from the bound function. Signature \u00b6 function bindDrop ( number n , function fn , [ Variant ... args ]) Parameters \u00b6 Name Type Synopsis n number The number of return values to remove from the function bound to fn . When positive or 0 , removes the first n values from the beginning of the bound function's return values. fn function A new function that invokes fn with args . args Variant... (optional) Zero or more arguments to pass to fn when invoking it. Returns \u00b6 Type(s) Synopsis function The function bound to fn . Side Effects \u00b6 None. Errors \u00b6 bindDrop will throw an error if n is less than 0 . bindDrop will throw an error if fn is missing or is not a function . Caveats \u00b6 All the performance caveats of bind also hold true for bindDrop . Additionally, the act of altering the number of return values from the bound function also incurs a slight performance penalty, due to needing to pack and unpack the bound function's return values. Examples \u00b6 Example: bindDrop local Helpfully = script . Parent . Helpfully local functions = require ( Helpfully . functions ) local bindDrop = functions . bindDrop local function divisionStats ( d , n ) local isPositive = ( n / d ) > 0 local isWhole = n % d == 0 return isPositive , isWhole end print ( divisionStats ( 2 , 4 )) -- true true local isEven = bindDrop ( 1 , divisionStats , 2 ) print ( isEven ( 4 )) -- true local function greet ( greeting , name ) return ( \"%s, %s!\" ): format ( greeting or \"Hello\" , name or \"person\" ) end print ( xpcall ( greet , error )) -- \"true Hello, person!\" local safeGreet = bindDrop ( 1 , xpcall , greet , error ) print ( safeGreet ()) -- Hello, person! safeGreet = bindDrop ( 1 , xpcall , greet , error , \"Hi\" ) print ( safeGreet ( \"user\" )) -- Hi, user! Function: bindKeep \u00b6 Returns a new bound function that invokes the specified function with the specified arguments, keeping only the specified number of return values from the bound function. Signature \u00b6 function bindKeep ( number n , function fn , [ Variant ... args ]) Parameters \u00b6 Name Type Synopsis n number The number of return values to keep from the function bound to fn . When positive or 0 , keeps only the first n values from the beginning of the bound function's return values. When negative, keeps only the last math.abs(n) values from the end of the bound function's return values. When n or math.abs(n) is greater than the number of arguments received by the bound function, keeps all return values. fn function A new function that invokes fn with args . args Variant... (optional) Zero or more arguments to pass to fn when invoking it. Returns \u00b6 Type(s) Synopsis function The function bound to fn . Side Effects \u00b6 None. Errors \u00b6 bindKeep will throw an error if fn is missing or is not a function . Caveats \u00b6 All the performance caveats of bind also hold true for bindKeep . Additionally, the act of altering the number of return values from the bound function also incurs a slight performance penalty, due to needing to pack and unpack the bound function's return values. Examples \u00b6 Example: bindKeep local Helpfully = script . Parent . Helpfully local functions = require ( Helpfully . functions ) local bindKeep = functions . bindKeep local function greetPets ( greeting , ...) local greetings = {} for _ , pet in ipairs ({...}) do local petGreeting = ( \"%s, %s!\" ): format ( greeting or \"Hello\" , pet or \"pet\" ) greetings [ # greetings + 1 ] = petGreeting end return table.unpack ( greetings , 1 , # greetings ) end print ( greetPets ( \"Hi\" , \"cat\" , \"dog\" , \"bird\" , \"mouse\" )) -- Hi, cat! Hi, dog! Hi, bird! Hi, mouse! local hiPets = bindKeep ( 3 , greetPets , \"Hi\" , \"cat\" , \"dog\" ) print ( hiPets ( \"bird\" , \"mouse\" )) -- Hi, cat! Hi, dog! Hi, bird! hiPets = bindKeep ( - 3 , greetPets , \"Hi\" , \"cat\" , \"dog\" ) print ( hiPets ( \"bird\" , \"mouse\" )) -- Hi, dog! Hi, bird! Hi, mouse! Function: noOp \u00b6 A function that literally does nothing. Signature \u00b6 void noOp () Parameters \u00b6 None. Returns \u00b6 None. Side Effects \u00b6 None. Errors \u00b6 None. Caveats \u00b6 None. Examples \u00b6 Example: noOp local Helpfully = script . Parent . Helpfully local functions = require ( Helpfully . functions ) local noOp = functions . noOp print ( noOp ()) -- Prints nothing. Learn More \u00b6 Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"functions"},{"location":"api-reference/functions/#helpfully-api-reference-functions","text":"functions contains functions for creating functions. Function Name Description bind Returns a new bound function that invokes the specified function with the specified arguments. bindDrop Returns a new bound function that invokes the specified function with the specified arguments, but removes the specified number of return values from the bound function. bindKeep Returns a new bound function that invokes the specified function with the specified arguments, keeping only the specified number of return values from the bound function. noOp A function that literally does nothing.","title":"Helpfully: API Reference: Functions"},{"location":"api-reference/functions/#function-bind","text":"Returns a new bound function that invokes the specified function with the specified arguments.","title":"Function: bind"},{"location":"api-reference/functions/#function-binddrop","text":"Returns a new bound function that invokes the specified function with the specified arguments, but removes the specified number of return values from the bound function.","title":"Function: bindDrop"},{"location":"api-reference/functions/#function-bindkeep","text":"Returns a new bound function that invokes the specified function with the specified arguments, keeping only the specified number of return values from the bound function.","title":"Function: bindKeep"},{"location":"api-reference/functions/#function-noop","text":"A function that literally does nothing.","title":"Function: noOp"},{"location":"api-reference/functions/#learn-more","text":"Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"Learn More"},{"location":"api-reference/paths/","text":"Helpfully: API Reference: Paths \u00b6 paths contains functions for parsing path strings and finding Instances by path. Function Name Description findByPath Returns an Instance corresponding to the location within the Roblox project tree hierarchy represented by the specified string path, relative to the project root. findChildByPath Returns an Instance corresponding to the location within the Roblox project tree hierarchy represented by the specified string path, relative to the specified Instance . separatedPath Returns an array of path components derived from the specified string path, separated according to the specified path delimiter. Function: findByPath \u00b6 Returns an Instance corresponding to the location within the Roblox project tree hierarchy represented by the specified string path, relative to the project root. Signature \u00b6 Instance findByPath ([ string path ], [ string separator ]) Parameters \u00b6 Name Type Synopsis path string (optional) The location within the Roblox project tree hierarchy, relative to the project root, at which to find and return the corresponding Instance . If present, must begin with character \" : \" (colon), which represents the name of a service. If missing or empty, nil will be returned. Each percent character \" % \" that appears within path is interpreted as an escape sequence, which allows the character that follows to be interpreted literally instead of as a path separator. This is useful if any Instance within the Roblox project tree hierarchy has a name that contains separator . separator string (optional) An optional one-character string delimiter by which path will be separated. Defaults to \" . \" (period). If specified to be the percent character \" % \", percent characters that appear within path will not be treated as escape sequences, but instead will be treated as path separators. Returns \u00b6 Type(s) Synopsis Instance or nil , string The Instance corresponding to path . If the specified Instance could not be found, this function returns a list containing nil and the string path component name that could not be found. Side Effects \u00b6 None. Errors \u00b6 findByPath will throw an error if path is specified but is not a string , or contains \" \\b \" (bell character), or begins with a character other than the colon character : , which represents the name of a service. findByPath will throw an error if separator is specified but is not a single-character string , or is \" \\b \" (bell character). Caveats \u00b6 None. Examples \u00b6 Example: findByPath local Helpfully = script . Parent . Helpfully local paths = require ( Helpfully . paths ) local findByPath = paths . findByPath local MyLib = game : GetService ( \"ReplicatedStorage\" ) : FindFirstChild ( \"Scripts\" , false ) : FindFirstChild ( \"MyLib\" , false ) print ( MyLib == findByPath ( \":ReplicatedStorage.Scripts.MyLib\" )) -- true print ( MyLib == findByPath ( \":ReplicatedStorage/Scripts/MyLib\" , \"/\" )) -- true Function: findChildByPath \u00b6 Returns an Instance corresponding to the location within the Roblox project tree hierarchy represented by the specified string path, relative to the specified Instance . Signature \u00b6 Instance findChildByPath ( Instance instance , [ string path ], [ string separator ]) Parameters \u00b6 Name Type Synopsis instance Instance The Instance from which path will be relative. path string (optional) The location within the Roblox project tree hierarchy, relative to instance , at which to find and return the corresponding Instance . If present and beginning with character \" : \" (colon), which represents the name of a service, this function will ignore instance and instead will operate identically to findByPath . If missing or empty, instance will be returned. Each percent character \" % \" that appears within path is interpreted as an escape sequence, which allows the character that follows to be interpreted literally instead of as a path separator. This is useful if any Instance within the Roblox project tree hierarchy has a name that contains separator . separator string (optional) A one-character string delimiter by which path will be separated. Defaults to \" . \" (period). If specified to be the percent character \" % \", percent characters that appear within path will not be treated as escape sequences, but instead will be treated as path separators. Returns \u00b6 Type(s) Synopsis Instance The Instance corresponding to path . nil, string If the specified Instance could not be found, this function returns a list containing nil and the string path component name that could not be found. Side Effects \u00b6 None. Errors \u00b6 findChildByPath will throw an error if instance is missing or is not an Instance . findChildByPath will throw an error if path is specified but is not a string , or contains \" \\b \" (bell character). findChildByPath will throw an error if separator is specified but is not a single-character string , or is \" \\b \" (bell character). Caveats \u00b6 None. Examples \u00b6 Example: findChildByPath local Helpfully = script . Parent . Helpfully local paths = require ( Helpfully . paths ) local findChildByPath = paths . findChildByPath local shared = game : GetService ( \"ReplicatedStorage\" ) local scripts = shared : FindFirstChild ( \"Scripts\" , false ) local MyLib = scripts : FindFirstChild ( \"MyLib\" , false ) print ( scripts == findChildByPath ( scripts )) -- true print ( scripts == findChildByPath ( shared , \"Scripts\" )) -- true print ( MyLib == findChildByPath ( scripts , \"MyLib\" )) -- true print ( MyLib == findChildByPath ( shared , \"Scripts.MyLib\" )) -- true print ( MyLib == findChildByPath ( shared , \"Scripts/MyLib\" , \"/\" )) -- true -- The following invocation ignores \"MyLib\", because \"path\" begins with -- service \":ReplicatedStorage\", and thus operates like \"findByPath\". print ( scripts == findChildByPath ( MyLib , \":ReplicatedStorage.Scripts\" )) -- true Function: separatedPath \u00b6 Returns an array of path components derived from the specified string path, separated according to the specified path delimiter. Signature \u00b6 table separatedPath ([ string path ], [ string separator ]) Parameters \u00b6 Name Type Synopsis path string (optional) The string path to separate by separator . If missing or empty, {} will be returned. Each percent character \" % \" that appears within path is interpreted as an escape sequence, which allows the character that follows to be interpreted literally instead of as a path separator. separator string (optional) A one-character string delimiter by which path will be separated. Defaults to \" . \" (period). If specified to be the percent character \" % \", percent characters that appear within path will not be treated as escape sequences, but instead will be treated as path separators. Returns \u00b6 Type(s) Synopsis table The array of path components derived from path , separated according the separator . Empty path elements are omitted. Side Effects \u00b6 None. Errors \u00b6 separatedPath will throw an error if path is specified but is not a string , or contains \" \\b \" (bell character). separatedPath will throw an error if separator is specified but is not a single-character string , or is \" \\b \" (bell character). Caveats \u00b6 separatedPath omits empty path components from its return value, which means that it cannot be used to determine whether the specified path starts with or ends with the specified separator . Examples \u00b6 Example: separatedPath local Helpfully = script . Parent . Helpfully local paths = require ( Helpfully . paths ) local separatedPath = paths . separatedPath local path = separatedPath ( \":ReplicatedStorage.Scripts.MyLib\" ) print ( table.concat ( path , \"/\" )) -- :ReplicatedStorage/Scripts/MyLib path = separatedPath ( \":ReplicatedStorage/Scripts/MyLib\" , \"/\" ) print ( table.concat ( path , \".\" )) -- :ReplicatedStorage.Scripts.MyLib local path = separatedPath ( \":ReplicatedStorage.Scripts%.MyLib\" ) print ( table.concat ( path , \"/\" )) -- :ReplicatedStorage/Scripts.MyLib Learn More \u00b6 Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"paths"},{"location":"api-reference/paths/#helpfully-api-reference-paths","text":"paths contains functions for parsing path strings and finding Instances by path. Function Name Description findByPath Returns an Instance corresponding to the location within the Roblox project tree hierarchy represented by the specified string path, relative to the project root. findChildByPath Returns an Instance corresponding to the location within the Roblox project tree hierarchy represented by the specified string path, relative to the specified Instance . separatedPath Returns an array of path components derived from the specified string path, separated according to the specified path delimiter.","title":"Helpfully: API Reference: Paths"},{"location":"api-reference/paths/#function-findbypath","text":"Returns an Instance corresponding to the location within the Roblox project tree hierarchy represented by the specified string path, relative to the project root.","title":"Function: findByPath"},{"location":"api-reference/paths/#function-findchildbypath","text":"Returns an Instance corresponding to the location within the Roblox project tree hierarchy represented by the specified string path, relative to the specified Instance .","title":"Function: findChildByPath"},{"location":"api-reference/paths/#function-separatedpath","text":"Returns an array of path components derived from the specified string path, separated according to the specified path delimiter.","title":"Function: separatedPath"},{"location":"api-reference/paths/#learn-more","text":"Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"Learn More"},{"location":"api-reference/tables/","text":"Helpfully: API Reference: Tables \u00b6 tables contains functions for manipulating tables. Function Name Description assign Returns the first passed table argument, first copying all non-array properties from each successive table argument passed to the function. augment Returns the first passed table argument, first copying all non-array properties from each successive table argument passed to the function, for properties that don't yet exist within the table. Function: assign \u00b6 Returns the first passed table argument, first copying all non-array properties from each successive table argument passed to the function. Signature \u00b6 table assign ( table table1 , [ table ... tables ]) Parameters \u00b6 Name Type Synopsis table1 table The table to modify and return. tables table... (optional) Zero or more table values from which to copy non-array properties into table1 . Returns \u00b6 Type(s) Synopsis table table1 Side Effects \u00b6 table1 will be modified, per the logic of this function. Errors \u00b6 assign will throw an error if table1 is missing or is not a table . Caveats \u00b6 assign ignores non- table values within tables . Examples \u00b6 Example: assign local Helpfully = script . Parent . Helpfully local tables = require ( Helpfully . tables ) local assign = tables . assign local t1 = {} assign ( t1 , { a = 1 }) -- t1 = { a = 1 } assign ( t1 , { b = 2 }, { c = 3 }) -- t1 = { a = 1, b = 2, c = 3 } assign ( t1 , { a = 2 , b = 2 }, { b = 3 }) -- t1 = { a = 2, b = 3, c = 3 } assign ( t1 , false , { c = 4 }, 10 ) -- t1 = { a = 2, b = 3, c = 4 } local t2 = assign ( t1 ) -- t2 == t1 Function: augment \u00b6 Returns the first passed table argument, first copying all non-array properties from each successive table argument passed to the function, for properties that don't yet exist within the table. Signature \u00b6 table augment ( table table1 , [ table ... tables ]) Parameters \u00b6 Name Type Synopsis table1 table The table to modify and return. tables table... (optional) Zero or more table values from which to copy non-array properties into table1 , for properties that don't yet exist within table1 . Returns \u00b6 Type(s) Synopsis table table1 Side Effects \u00b6 table1 will be modified, per the logic of this function. Errors \u00b6 augment will throw an error if table1 is missing or is not a table . Caveats \u00b6 augment ignores non- table values within tables . Examples \u00b6 Example: augment local Helpfully = script . Parent . Helpfully local tables = require ( Helpfully . tables ) local augment = tables . augment local t1 = {} augment ( t1 , { a = 1 }) -- t1 = { a = 1 } augment ( t1 , { b = 2 }) -- t1 = { a = 1, b = 2 } augment ( t1 , { a = 2 , c = 3 }, { b = 3 }) -- t1 = { a = 1, b = 2, c = 3 } augment ( t1 , false , { d = 4 }, 10 ) -- t1 = { a = 1, b = 2, c = 3, d = 4 } local t2 = augment ( t1 ) -- t2 == t1 Learn More \u00b6 Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"tables"},{"location":"api-reference/tables/#helpfully-api-reference-tables","text":"tables contains functions for manipulating tables. Function Name Description assign Returns the first passed table argument, first copying all non-array properties from each successive table argument passed to the function. augment Returns the first passed table argument, first copying all non-array properties from each successive table argument passed to the function, for properties that don't yet exist within the table.","title":"Helpfully: API Reference: Tables"},{"location":"api-reference/tables/#function-assign","text":"Returns the first passed table argument, first copying all non-array properties from each successive table argument passed to the function.","title":"Function: assign"},{"location":"api-reference/tables/#function-augment","text":"Returns the first passed table argument, first copying all non-array properties from each successive table argument passed to the function, for properties that don't yet exist within the table.","title":"Function: augment"},{"location":"api-reference/tables/#learn-more","text":"Read the API Reference to learn about Helpfully modules. Read the Installation instructions to learn how to make Resourceful available within your projects.","title":"Learn More"}]}